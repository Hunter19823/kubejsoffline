plugins {
    id "com.github.johnrengelman.shadow" version "${shadowjar_version}"
	id 'me.shedaniel.unified-publishing'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
		mixinConfig project.forge_mixin
		mixinConfig project.common_mixin
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
	modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

	modImplementation("dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}")


	minecraftLibraries("org.reflections:reflections:${project.reflections_version}")
	minecraftLibraries("org.javassist:javassist:${project.javassist_version}")

	implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${rootProject.mixin_extras}"))
	implementation(include("com.github.llamalad7.mixinextras:mixinextras-forge:${rootProject.mixin_extras}"))
}

shadowJar {
    exclude "${rootProject.fabric_config}"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]

    classifier "dev-shadow"

	relocate "org.reflections", "${project.group}.kubejsoffline.reflections"
	relocate "javassist", "${project.group}.kubejsoffline.javassist"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}


unifiedPublishing {
	project {
		releaseType = rootProject.artifact_type
		gameVersions = [
				rootProject.minecraft_version
		]
		gameLoaders = ["forge"]
		displayName = "$project.mod_name Forge $project.version"
		mainPublication remapJar

		relations {
			depends {
				curseforge = modrinth = "architectury-api"
			}
			depends {
				curseforge = modrinth = "rhino"
			}
			depends {
				curseforge = modrinth = "kubejs"
			}
		}

		var CF = System.getenv("CURSEFORGE_KEY")
		if (CF != null) {
			curseforge {
				token = CF
				id = project.curseforge_id
			}
		}
		var MT = System.getenv("MODRINTH_TOKEN")
		if (MT != null) {
			modrinth {
				token = MT
				id = project.modrinth_id
				version = "$project.name+$project.version"
			}
		}
	}
}
